#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -euo pipefail
set -x

BUILD_DIR=${1}
CACHE_DIR=${2}
ENV_DIR=${3}

cd $BUILD_DIR
pwd

# save space on slug
rm -rf \
  .DS_Store \
  .git/ \
  .github/ \
  .ruby-lsp/ \
  astro_charts_etc/ \
  astrolog/versions/7.60/dev/ \
  cli/ \
  design/ \
  guardrails/ \
  infra/ \
  spikes/ \
  ui/ \

cd saturn
pwd

du -sh .
du -sh * | sort -hr

# --- Create runtime export for SE_EPHE_PATH (resolved at dyno boot) ---
mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/set_ephemeris_path.sh" <<'EOF'
# Generated by custom buildpack: resolve Swiss Ephemeris data path at runtime.

set +eu
set -x

resolve_with_bundle() {
  if command -v bundle >/dev/null 2>&1; then
    local dir
    # 'bundle info --path' prints the gem directory; append vendor/swe_data
    dir="$(bundle info astroscript --path 2>/dev/null)"
    if [ -n "$dir" ]; then
      printf '%s\n' "${dir%/}/vendor/swe_data"
      return 0
    fi
  fi
  return 1
}

resolve_with_ruby() {
  if command -v ruby >/dev/null 2>&1; then
    ruby -e 'begin
      require "rubygems"
      spec = Gem::Specification.find_by_name("astroscript")
      puts File.join(spec.gem_dir, "vendor", "swe_data")
    rescue Exception
      # silent fallback
    end'
  fi
}

EPHE=""
EPHE="$(resolve_with_bundle)"
if [ -z "$EPHE" ]; then
  EPHE="$(resolve_with_ruby)"
fi

if [ -n "$EPHE" ]; then
  export SE_EPHE_PATH="$EPHE"
fi

unset EPHE
EOF

# echo $PATH
# export PATH="${PATH}:$(cat $ENV_DIR/PATH)"
# echo $PATH

# Source any profile scripts produced by earlier buildpacks (e.g., Ruby)
# if [ -d "$BUILD_DIR/.profile.d" ]; then
#   for f in "$BUILD_DIR/.profile.d/"*; do
#     [ -r "$f" ] && . "$f"
#   done
# fi

# EPHEMERIS_DATA_DIR=$(bundle info astroscript --path)/vendor/swe_data
# cp -r $EPHEMERIS_DATA_DIR $BUILD_DIR/saturn

# # --- Ensure Ruby buildpack tools available ---
# export HOME="$BUILD_DIR"
# RUBY_BIN_DIR="$BUILD_DIR/.heroku/ruby/bin"
# APP_BIN_DIR="$BUILD_DIR/bin"
# BUNDLE_BIN_DIR="$BUILD_DIR/vendor/bundle/bin"
# export PATH="$RUBY_BIN_DIR:$APP_BIN_DIR:$BUNDLE_BIN_DIR:$PATH"


# # Compute path to Swiss Ephemeris data
# EPHEMERIS_DATA_DIR="$(bundle info astroscript --path)/vendor/swe_data"

# # Create .profile.d directory if missing
# mkdir -p "$BUILD_DIR/.profile.d"

# # Write an environment export file for runtime
# cat <<EOF > "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh"
# # This file is generated by your custom buildpack
# export SE_EPHE_PATH="$EPHEMERIS_DATA_DIR"
# EOF

# cat "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh"

# cat "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh"

# mkdir -p "$BUILD_DIR/.profile.d"
# cat > "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh" <<'EOF'
# # Do not override operator-provided value.
# if [ -z "${SE_EPHE_PATH:-}" ] && command-v ruby >/dev/null 2>&1; then
#   _dir="$(ruby -e 'spec = Gem::Specification.find_all_by_name("astroscript").first; puts File.join(spec.gem_dir, "vendor", "swe_data") if spec')"
#   if [ -n "$_dir" ] && [ -d "$_dir" ]; then
#     export SE_EPHE_PATH="$_dir"
#   fi
# fi
# EOF

# cat "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh"

# EPHEMERIS_DATA_DIR="$(bundle info astroscript --path)/vendor/swe_data"

# # Create a .profile.d script that sets a default only if not already provided.
# mkdir -p "$BUILD_DIR/.profile.d"
# {
#   echo '# Set defaults without overriding user-provided config vars.'
#   # The backslash before $ prevents expansion *now*; the double quotes
#   # ensure the backslash is not written to the file, so the runtime shell
#   # sees ${SE_EPHE_PATH:=...} correctly.
#   echo ": \"\${SE_EPHE_PATH:=$EPHEMERIS_DATA_DIR}\""
#   echo 'export SE_EPHE_PATH'
# } > "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh"

# (set -x && cat "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh")

# mkdir -p "$BUILD_DIR/.profile.d"
# # Only set defaults; do not override user-provided config vars:
# cat > "$BUILD_DIR/.profile.d/00-aistrologer-buildpack-env.sh" <<'EOF'
# : "${SE_EPHE_PATH:=EPHEMERIS_DATA_DIR}"
# export SE_EPHE_PATH
# EOF

# # cd $(bin/bundle show wkhtmltopdf-binary)/bin
# cd /app/saturn/vendor/bundle/ruby/3.2.0/gems/wkhtmltopdf-binary-0.12.6.8/bin
# mv wkhtmltopdf_ubuntu_22.04_amd64.gz /tmp/
# rm *.gz
# mv /tmp/wkhtmltopdf_ubuntu_22.04_amd64.gz ./

# TODO lock wkhtmltopdf version to ensure compatible with pdfkit
# if [[ $(wkhtmltopdf --version) != *"wkhtmltopdf 0.12.5"* ]]; then
#   echo "wkhtmltopdf version is not 0.12.5"
#   exit 1
# fi

exit 0
