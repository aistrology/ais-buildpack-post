#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -euo pipefail
set -x

BUILD_DIR=${1}
CACHE_DIR=${2}
ENV_DIR=${3}

cd $BUILD_DIR
pwd

# save space on slug
rm -rf \
  .DS_Store \
  .git/ \
  .github/ \
  .ruby-lsp/ \
  astro_charts_etc/ \
  astrolog/versions/7.60/dev/ \
  cli/ \
  design/ \
  guardrails/ \
  infra/ \
  spikes/ \
  ui/ \

cd saturn
pwd

du -sh .
du -sh * | sort -hr

# --- Create runtime export for SE_EPHE_PATH (resolved at dyno boot) ---
mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/set_ephemeris_path.sh" <<'EOF'
# Generated by custom buildpack: resolve Swiss Ephemeris data path at runtime.

set +eu

resolve_with_bundle() {
  if command -v bundle >/dev/null 2>&1; then
    local dir
    # 'bundle info --path' prints the gem directory; append vendor/swe_data
    dir="$(bundle info astroscript --path 2>/dev/null)"
    if [ -n "$dir" ]; then
      printf '%s\n' "${dir%/}/vendor/swe_data"
      return 0
    fi
  fi
  return 1
}

resolve_with_ruby() {
  if command -v ruby >/dev/null 2>&1; then
    ruby -e 'begin
      require "rubygems"
      spec = Gem::Specification.find_by_name("astroscript")
      puts File.join(spec.gem_dir, "vendor", "swe_data")
    rescue Exception
      # silent fallback
    end'
  fi
}

EPHE=""
EPHE="$(resolve_with_bundle)"
if [ -n "$EPHE" ]; then
  echo "Resolved Swiss Ephemeris data path with bundle: $EPHE"
else
  # echo "Failed to resolve Swiss Ephemeris data path with bundle, trying ruby"
  EPHE="$(resolve_with_ruby)"
fi

if [ -n "$EPHE" ]; then
  echo "Resolved Swiss Ephemeris data path with ruby: $EPHE"
fi

if [ -n "$EPHE" ]; then
  export SE_EPHE_PATH="$EPHE"
  echo "[aistrologer-buildpack-post] Set env var SE_EPHE_PATH to $EPHE"
fi

unset EPHE
EOF

# # cd $(bin/bundle show wkhtmltopdf-binary)/bin
# cd /app/saturn/vendor/bundle/ruby/3.2.0/gems/wkhtmltopdf-binary-0.12.6.8/bin
# mv wkhtmltopdf_ubuntu_22.04_amd64.gz /tmp/
# rm *.gz
# mv /tmp/wkhtmltopdf_ubuntu_22.04_amd64.gz ./

# TODO lock wkhtmltopdf version to ensure compatible with pdfkit
# if [[ $(wkhtmltopdf --version) != *"wkhtmltopdf 0.12.5"* ]]; then
#   echo "wkhtmltopdf version is not 0.12.5"
#   exit 1
# fi

exit 0
